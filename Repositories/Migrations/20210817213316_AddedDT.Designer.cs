// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

namespace Repositories.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210817213316_AddedDT")]
    partial class AddedDT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Entities.Desperfecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Tiempo")
                        .HasColumnType("float");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Desperfecto");
                });

            modelBuilder.Entity("Models.Entities.Presupuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Descuentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("DesperfectoId")
                        .HasColumnType("int");

                    b.Property<double>("Estacionamiento")
                        .HasColumnType("float");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 8, 17, 18, 33, 16, 430, DateTimeKind.Local).AddTicks(7637));

                    b.Property<double>("ManoDeObra")
                        .HasColumnType("float");

                    b.Property<double?>("Recargos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double?>("Repuestos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("DesperfectoId")
                        .IsUnique();

                    b.ToTable("Presupuesto");
                });

            modelBuilder.Entity("Models.Entities.Repuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Repuesto");
                });

            modelBuilder.Entity("Models.Entities.RepuestoDesperfecto", b =>
                {
                    b.Property<int>("RepuestoId")
                        .HasColumnType("int");

                    b.Property<int>("DesperfectoId")
                        .HasColumnType("int");

                    b.HasKey("RepuestoId", "DesperfectoId");

                    b.HasIndex("DesperfectoId");

                    b.ToTable("RepuestosRequeridos");
                });

            modelBuilder.Entity("Models.Entities.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("Id");

                    b.HasIndex("Patente")
                        .IsUnique();

                    b.ToTable("Vehiculo");
                });

            modelBuilder.Entity("Models.Entities.Automovil", b =>
                {
                    b.HasBaseType("Models.Entities.Vehiculo");

                    b.Property<int>("CantidadPuertas")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.ToTable("Automovil");
                });

            modelBuilder.Entity("Models.Entities.Moto", b =>
                {
                    b.HasBaseType("Models.Entities.Vehiculo");

                    b.Property<int>("Cilindrada")
                        .HasColumnType("int");

                    b.ToTable("Moto");
                });

            modelBuilder.Entity("Models.Entities.Desperfecto", b =>
                {
                    b.HasOne("Models.Entities.Vehiculo", "Vehiculo")
                        .WithMany("Desperfectos")
                        .HasForeignKey("VehiculoId")
                        .HasConstraintName("FK_Vehiculo_Desperfecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Models.Entities.Presupuesto", b =>
                {
                    b.HasOne("Models.Entities.Desperfecto", "Desperfecto")
                        .WithOne("Presupuesto")
                        .HasForeignKey("Models.Entities.Presupuesto", "DesperfectoId")
                        .HasConstraintName("FK_Desperfecto_Presupuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desperfecto");
                });

            modelBuilder.Entity("Models.Entities.RepuestoDesperfecto", b =>
                {
                    b.HasOne("Models.Entities.Desperfecto", "Desperfecto")
                        .WithMany("Repuestos")
                        .HasForeignKey("DesperfectoId")
                        .HasConstraintName("FK_RepuestoDesperfecto_Desperfecto")
                        .IsRequired();

                    b.HasOne("Models.Entities.Repuesto", "Repuesto")
                        .WithMany("RepuestosDesperfectos")
                        .HasForeignKey("RepuestoId")
                        .HasConstraintName("FK_RepuestoDesperfecto_Repuesto")
                        .IsRequired();

                    b.Navigation("Desperfecto");

                    b.Navigation("Repuesto");
                });

            modelBuilder.Entity("Models.Entities.Automovil", b =>
                {
                    b.HasOne("Models.Entities.Vehiculo", null)
                        .WithOne()
                        .HasForeignKey("Models.Entities.Automovil", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Moto", b =>
                {
                    b.HasOne("Models.Entities.Vehiculo", null)
                        .WithOne()
                        .HasForeignKey("Models.Entities.Moto", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Desperfecto", b =>
                {
                    b.Navigation("Presupuesto");

                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("Models.Entities.Repuesto", b =>
                {
                    b.Navigation("RepuestosDesperfectos");
                });

            modelBuilder.Entity("Models.Entities.Vehiculo", b =>
                {
                    b.Navigation("Desperfectos");
                });
#pragma warning restore 612, 618
        }
    }
}
